// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: catalog_games.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createCatalogGame = `-- name: CreateCatalogGame :one
INSERT INTO catalog_games (id, name, description, imageURL)
VALUES ($1, $2, $3, $4)
RETURNING id, name, description, imageurl
`

type CreateCatalogGameParams struct {
	ID          uuid.UUID
	Name        string
	Description sql.NullString
	Imageurl    sql.NullString
}

func (q *Queries) CreateCatalogGame(ctx context.Context, arg CreateCatalogGameParams) (CatalogGame, error) {
	row := q.db.QueryRowContext(ctx, createCatalogGame,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Imageurl,
	)
	var i CatalogGame
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Imageurl,
	)
	return i, err
}

const deleteCatalogGame = `-- name: DeleteCatalogGame :exec
DELETE FROM catalog_games WHERE id=$1
`

func (q *Queries) DeleteCatalogGame(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCatalogGame, id)
	return err
}

const getAllCatalogGames = `-- name: GetAllCatalogGames :many
SELECT id, name, description, imageurl FROM catalog_games
`

func (q *Queries) GetAllCatalogGames(ctx context.Context) ([]CatalogGame, error) {
	rows, err := q.db.QueryContext(ctx, getAllCatalogGames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CatalogGame
	for rows.Next() {
		var i CatalogGame
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Imageurl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCatalogGameById = `-- name: GetCatalogGameById :one
SELECT id, name, description, imageurl FROM catalog_games WHERE id=$1
`

func (q *Queries) GetCatalogGameById(ctx context.Context, id uuid.UUID) (CatalogGame, error) {
	row := q.db.QueryRowContext(ctx, getCatalogGameById, id)
	var i CatalogGame
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Imageurl,
	)
	return i, err
}

const updateCatalogGame = `-- name: UpdateCatalogGame :one
UPDATE catalog_games SET name=$2, description=$3, imageURL=$4
WHERE id=$1
RETURNING id, name, description, imageurl
`

type UpdateCatalogGameParams struct {
	ID          uuid.UUID
	Name        string
	Description sql.NullString
	Imageurl    sql.NullString
}

func (q *Queries) UpdateCatalogGame(ctx context.Context, arg UpdateCatalogGameParams) (CatalogGame, error) {
	row := q.db.QueryRowContext(ctx, updateCatalogGame,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Imageurl,
	)
	var i CatalogGame
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Imageurl,
	)
	return i, err
}
